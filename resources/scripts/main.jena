import = source("resources/scripts/import.jena") =>
storage = import.storage.file[]() =>
window = import.window.new[]() =>
status = import.frameUpdateStatus.new[]() =>
time = import.time.new[]() =>
deltaTime = import.delta.new[import.floatFunc, import.updateStatus] [time, status] =>
screenWidth = box 1200 =>
screenHeight = box 800 =>
math =
{
    .float:f -> import.floatFunc.of[import.float] f,
    .float2:xy -> import.vector2.newXY[import.float, import.float] xy,
    .float3:xyz -> import.vector3.newXYZ[import.float, import.float, import.float] xyz,
} =>
windowStart =
(
    windowId ->
    (
        gl = source "resources/scripts/opengl.jena" =>
        shaderLoader = import.shader.loader[import.storage, import.opengl][storage, gl] =>
        skinShader = shaderLoader.load[import.string, import.string]["resources/shaders/diffuse_skin_vertex.glsl", "resources/shaders/diffuse_fragment.glsl"] =>
        diffuseShader = shaderLoader.load[import.string, import.string]["resources/shaders/diffuse_vertex.glsl", "resources/shaders/diffuse_fragment.glsl"] =>
        light = math.float3[0, 0, 1] =>
        projection = import.matrix4.perspective
        [
            import.float,
            import.float,
            import.float,
            import.float
        ][
            screenWidth.get / (screenHeight.get),
            60 / 180 * 3.14,
            0.01,
            100
        ] =>
        graphics = import.graphics.collada
        [
            import.opengl,
            import.shader,
            import.shader,
            import.storage,
            import.updateStatus
        ][
            gl,
            diffuseShader,
            skinShader,
            storage,
            status
        ] =>
        in =
        {
            .graphics:
            {
                .animatedModel:file -> model = graphics.animatedModel[import.string] file =>
                (
                    root -> anim -> model.animate[import.matrix4, import.vector3, import.matrix4, import.skeleton]
                        [projection, light, root, anim]
                ),
                .animation:file -> anim = graphics.animation[import.string] file =>
                (
                    time -> anim.animate[import.float] time
                ),
            },
            .mouse:(source "resources/scripts/mouse.jena" [windowId, status]),
            .keyboard:(source "resources/scripts/keyboard.jena" [windowId, status]),
        } =>
        model =
        {
            .skin:(in.graphics.animatedModel "resources/models/Knight/Walk.dae"),
            .idle:(in.graphics.animation "resources/models/Knight/Idle.dae"),
            .walk:(in.graphics.animation "resources/models/Knight/Walk.dae"),
        } =>
        turnAngle = box(0) =>
        position = box(math.float3[0, 0, 0]) =>
        windowLoop = width -> height ->
        [
            status.update[](),
            screenWidth.set width,
            screenHeight.set height,

            wasd = import.vector2.wasd[import.keyboard](in.keyboard).normalized[]() =>
            movement = (import.vector3.newXZ[import.vector2] (wasd.mul[import.float] (deltaTime.value[]() * 3))) =>
            actualPosition = position.apply(p -> p.add[import.vector3] movement) =>
            
            standing = wasd.length[]() == 0 =>
            actualAngle = (turnAngle.set([-3.14 * 1.5 (wasd.angle[]() -), turnAngle.get] standing)) =>
            rotation = import.matrix4.rotationY[import.float] (actualAngle)
                .mul[import.matrix4](import.matrix4.rotationX[import.float] (-3.14 * 0.5)) =>
            
            translation = import.matrix4.translation[import.vector3](math.float3[0, -1, 3].add[import.vector3]actualPosition) =>
            
            root = translation.mul[import.matrix4] rotation =>
            [
                animation = [model.walk, model.idle]standing =>
                model.skin(root)(animation(time.value[]())).draw[]()
            ],
        ] =>
        args -> windowLoop (args 0) (args 1)
    )
)
=>
window.run[import.int, import.int, import.windowStartAction][screenWidth.get, screenHeight.get, windowStart]